	Amazon S3

- The permissible object size in S3 is 0 bytes to 5 TB
- Buckets are created at root level in S3 with a globally unique name.
	- You can store objects and folders inside a bucket
	- Any number of objects can be stored in a bucket

- Bucket
	- logical unit in s3
	- The account, which owns the bucket, is charged for the data transer
	- If version control is enabled on a bucket, it maintains a unique version ID against each object stored in it.

- Objects
	- Each object consists of the data, metadata, and a globally unique identifier
	- Metadata is stored in a set of name-value pair, which describes the information associated with the object
		- There can be two types of metadata associated with an object:
			-system-defined metadata
			- user-defined metadata

	- An object is identified with a unique key(name) within the bucket and a 
	version ID if versioning is enabled on the bucket

- Keys
	- a key is the name that is assigned to an object
	- every object in a bucket has only one key associated with it
	- The combination of a bucket, key, and its respective version ID uniquely identifies an object within a bucket
	- Every object within a bucket has a unique address for accessing it through a web service endpoint
		- The address URL consists of the bucket name, key, and version number

	Ex. 
		https://packtpub.s3.amazonaws.com/books/acda-guide.pdf
		     Bucket Name/  S3 Endpoint   / Key


- Region
	- Users can choose a region while creating a bucket
	- When you create an object in a region it is stored in the same region unless you explicitly copy it over to any other region

- S3 data consistency model: 
	- Amazon provides two types of consistency model for S3 data when you perform various input/output operations with it: 
		- read-after-write consistency
		- eventual consistency

- read-after-write consistency
	- PUTS of new object
	- S3 gives eventual consistency for HEAD or GET requests while retrieving the key name before creating an object
	- If you create a new object in S3 you can immediately read it

- Eventual consistency
	- Overwrite PUTS and DELETES
	- It takes a few seconds before the changes are reflected in S3 when you overwrite an existing object in S3 or delete an existing object

- When you create a new object in S3, the data is saved in S3, however, this change must replicate across the Amazon S3 regions
	- Replication may take some time and you may observe the following behavior:
		- After you create a new object in S3, Amazon immediately lists the object keys within the bucket and the new object keys may not appear in the list
		- When you replace an existing ojbect and immediately try to read the object, Amazon may return old data until the data is fully replicated
		- When you delete an object and immediately try to read it, Amazon may read the data for the deleted object until the deletion is fully replicated
		- When you delete an object in a bucket and immediately list the contents of the bucket, you may still see the deleted object in the content of the bucket until the deletion is fully replicated


- Bucket restriction and limitations:

	- You can create a bucket using the S3 console, APIs or CLI
	- Amazon imposes a soft limit of 100 buckets on AWS account
	- Bucket ownership cannot be transferred to another AWS account or another user within the same AWS account
	- There is no limit on the number of objects that can be created in a bucket
	- If you use an application that automatically creates a bucket, ensure that the application chooses a different bucket name in case the bucket name generated by the application already exists


- Bucket Access control
	
	- Each bucket in S2 is assocated with an access control policy which governs how objects are created, deleted, and enumerated within the bucket
	- When you create an S3 resource, all resources, including buckets, objects, lifecycle policy, are by default private
		- The resource can grant permissions to others using an access control policy

	- There are two types of access control policy:
		- Resource-based policies
		- User policies

- Access policies that you associate with buckets and objects are called resource-based policies
	- Bucket policies and Access Control Lists (ACL) are examples of resource-based policies
- Access policies that you associate with users are called user policies

Bucket policy(compromised of the following elements):

- Resource
	- indicates Amazon S3 resources such as buckets and objects
	- While creating a policy, you can specify ARN to allow or deny permissions on that resource

- Action
	- this indicates one or more actions that are either allowed or denied

- Effect
	- This specified either Allow or Deny access
	- If permission is not explicitly granted on a resource, access is denied
	- When you explicitly Deny access, it ensures that the user cannot access the resource even if aanother policy grants access

- Principal
	- This indicates the account or a user who is allowed or denied access ot the resources mentioned in the policy statement
	- In a user policy, you may not need to specify a principal
	- A user policy implicitly applies to the associated user

- Sid
	- optional identifier known as statement ID

User Policies

- Access policies are associated with users or groups
- You don't need to specify Principal in user policy
- A policy is implicitly applied to the user with whom it is associted
- Once a user policy is created it can be attached to a user or a group to grant them

Transfer Acceleration

- It provides a fast, easy, and secure way to transfer between S2 and any other source or target of such data transfers
- For Transfer Acceleration, Amazon uses CloudFront edge locations
	- CloudFront edge locations are spread across the Globe

The scenarios in which you should use Transfer Acceleration are:

	- You have a centralized bucket, which your end customers use from across the Globe for uploading data
	- You regularly transfer GBs and TBs of data across continents
	- If available bandwidth is underutilized while you transfer data to S3

Requester Pay model
	- When you configure a bucket as a Requester Pays bucket, the requester pays for the requests they initiate to download or upload data in the bucket.
	- You just pay for the cost of the data you store in S3
	-You can enable Requester Pays on a bucket when you want to share the data, but do not want to get charged for the requests received, data downloads, or upload operations
	- When you enable Requester Pays, AWS does not allow you to enable anonymous access on the bucket
	- All requests to the Requester Pays buckets must be authenticated
		- When you enable authentication, S3 can identify requesters and charge them for their respective usage of the bucket
	- If a system or application makes requests by assuming an IAM role, AWS charges the account where the assumed role belongs
	- If you make calls to the bucket using an application, the request must include:
	x-amz-request-payer in the header section if you make POST, GET, and HEAD requests
	- If you make a REST request, you need to include x-amz-request-payer as a parameter in the request
	- Requester Pays buckets do not support anonymous request, BitTorrent, and SOAP requests
	- Amazon does not allow you to enable end user logging on is enabled


	Understanding objects ( components):

	- Key
		- is the name that is assigned to an object
		- can be used to access or retrieve the object

	- Version ID
		- If you enable versioning on an bucket, S3 associates a version ID with each object
		- The bucket may have one or more objects with the same key, but a different
		 version ID
		- The version ID helps in identifying an object when there a multiple objects with the same key

	- Value
		- refers to the content or data that is stored an object

	- Metadata
		- S3 stores reference information related to an object in its metadata in the form of name-value pairs
			2 types of metadata:
			- system data
				used for managing objects 
			- user-defined metadata
				- used for managing information related to objects

	- Subresources
		- An object can have subresources associated with it

	- Access control information
		- Amazon s3 enables you to control access on the objects you create using ACL, bucket policies, and user policies
		- Access control information is nothing but the information containing permissions in the form of ACL, a bucket policy, or user access policies

	Object Keys
		- A key name uniquely identifies an object in the bucket
		- When you browse a bucket in the S3 console, it displays a list of objects within the bucket
		- the list of names wiwthin the bucket are object keys

	Object metadata
		- S3 stores reference information related to an object in its metadata in the form of name-value pairs

	Versioning

		- Versioning can be enabled at bucket level
		- Once versioning is enabled, it protects you from accidental updates and deletes on an object
		- When you overwrite or delete an object, it keeps multiple copies with version numbers
		- When you delete an object in a version-enabled bucket, S3 does not actually delete the object but instead adds a delete marker to it


	Object tagging
		- Tagging an object helps in categorizing the objects
		- Each tag is a key and value pair

	S3 storage classes
	- S3 Standard Storage
	- S3 - Infrequently Accessed(IA) storage
	- S3 - Reduced Redundancy Storage (RRS)
	- Glacier

	Lifecycle management

	- is a mechanism in S3 that enables you to either automatically transition an object from one storage class to another storage class or automatically delete an object based on configuration
	- Lifecycle rules can be applied to a group of objects based on filter criteria set in the rule
	- Two types of action you can define in Lifecycle rules:
		- Transition actions
			- This defines when an object storage class changes from an existing storage class to target storage class
		- Expiration actions
			- This defines when objects expire
			- When objects expire, Amazon S3 automatically deletes them from you

	Hosting static website on S3

	- a static website can contain web pages with static content as well as client side scripts
	- S3 does not support server side scripting so you cannot host a site with any server side scripting such as PHP, JSP, ASP.Net

	Cross-Origin Resource Sharing (CORS)
		 - is a mechanism for client web applications hosted on one domain to use resources hosted on another domain
		 - You can selectively enable CORS support on S3 using S3 console, S3 REST API, and AWS SDKs

	Configuring CORS on a bucket
		- you need to create an XML document which defines the rule to allow cross-origin access on your bucket
		- You can either open full access to all domains or open access for specific origin domains or URL

	Cross-region replication
		- S3 enables you to automatically and asynchronously copy objects from a bucket in one AWS region to another AWS region
			- This is a bucket level feature which can be configured on source bucket
		- In the replication configuration, you can specify destination bucket where you want your source bucket objects to be replicated
		- In the configuration, you can specific key prefixes.	
			- S3 replicates all the objects starting with a specific key prefixes to destination bucket
		- Cross-region replication is generally used for compliance requirements, for minimizing latency in accessing objects, and for any operational reasons wherein compute resources in multiple regions need to access data from region specific buckts
		- Requirements for enabling cross-region replication:
			- Both, source as well as destination bucket must have versioning enabled on them
			- Source and destination buckets must be in different regions
			- S3 allows you to replicate objects from a source bucket to only one destination
			- You must provide permission to Amazon S3 for replicating objects from source to destination bucket
			- If source and destination bucket owners are different, source bucket must have permission for S3:GetObjectVersion and S3:GetObjectVersionACL actions
			- If source and destination bucket are in different AWS accounts, source bucket owner must have access to replicate objects in the destination bucket


	

	
